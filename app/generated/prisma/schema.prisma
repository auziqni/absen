// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusKehadiran {
  HADIR
  TELAT
  IZIN
  SAKIT
  ALPHA
  NONE
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  nama      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dosen {
  id        String   @id @default(uuid())
  nip       String   @unique
  nama      String
  email     String   @unique
  password  String
  noHP      String?
  alamat    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi balik
  kelasUtama      Kelas[] @relation("DosenUtama")
  kelasPendamping Kelas[] @relation("DosenPendamping")
}

model Mahasiswa {
  id        String   @id @default(uuid())
  nim       String   @unique
  nama      String
  email     String   @unique
  password  String
  noHP      String?
  alamat    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi balik
  kelas     MahasiswaKelas[]
  pertemuan PertemuanAbsensi[]
}

model Kelas {
  id              String   @id @default(uuid())
  kodeKelas       String   @unique
  namaKelas       String
  deskripsi       String? // Deskripsi kelas
  pinKelas        String
  hariPertemuan   String // Bisa pakai enum juga
  jumlahPertemuan Int
  statusAktif     Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relasi ke 2 dosen tetap
  dosenUtamaId      String // FK ke Dosen (dosen utama)
  dosenPendampingId String? // FK ke Dosen (dosen pendamping, opsional)

  // Relasi
  dosenUtama      Dosen  @relation("DosenUtama", fields: [dosenUtamaId], references: [id])
  dosenPendamping Dosen? @relation("DosenPendamping", fields: [dosenPendampingId], references: [id])

  // Relasi lainnya
  mahasiswa MahasiswaKelas[]
  pertemuan PertemuanAbsensi[]
}

model MahasiswaKelas {
  id String @id @default(uuid())

  // Relasi
  mahasiswaId String
  kelasId     String
  mahasiswa   Mahasiswa @relation(fields: [mahasiswaId], references: [id])
  kelas       Kelas     @relation(fields: [kelasId], references: [id])

  // Data tambahan relasi
  tanggalGabung DateTime @default(now())
  statusAktif   Boolean  @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Constraint untuk memastikan kombinasi unik
  @@unique([mahasiswaId, kelasId])
}

model PertemuanAbsensi {
  id String @id @default(uuid())

  // Data Pertemuan
  nomorPertemuan   Int
  tanggalPertemuan DateTime
  topik            String?
  catatan          String?

  // Data Absensi
  mahasiswaId     String
  statusKehadiran StatusKehadiran @default(NONE)
  jamAbsen        DateTime?
  lokasi          String?
  keterangan      String?

  // Relations
  kelas     Kelas     @relation(fields: [kelasId], references: [id])
  kelasId   String
  mahasiswa Mahasiswa @relation(fields: [mahasiswaId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Constraint untuk memastikan kombinasi unik
  @@unique([kelasId, nomorPertemuan, mahasiswaId])
  // Indeks untuk meningkatkan performa query
  @@index([kelasId, nomorPertemuan])
  @@index([mahasiswaId])
}
